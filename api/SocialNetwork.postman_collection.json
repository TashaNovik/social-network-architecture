{
  "info": {
    "name": "Social Network Microservices API",
    "description": "Complete API collection for social network microservices architecture",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://api.socialnetwork.com",
      "type": "string",
      "description": "Base URL for all API endpoints"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string",
      "description": "JWT authentication token"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string",
      "description": "Current user ID"
    },
    {
      "key": "post_id",
      "value": "",
      "type": "string",
      "description": "Post ID for testing"
    },
    {
      "key": "receiver_id",
      "value": "",
      "type": "string",
      "description": "Message receiver ID"
    },
    {
      "key": "friend_id",
      "value": "",
      "type": "string",
      "description": "Friend ID for friendship actions"
    },
    {
      "key": "media_id",
      "value": "",
      "type": "string",
      "description": "Media ID for media actions"
    },
    {
      "key": "search_query",
      "value": "",
      "type": "string",
      "description": "Search query for searching users, posts, comments"
    },
    {
      "key": "notification_id",
      "value": "",
      "type": "string",
      "description": "Notification ID for notification actions"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Auth Service",
      "description": "Authentication and authorization endpoints",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('user_id', response.user_id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"securePassword123\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"contact_info\": {\n    \"phone\": \"+1234567890\",\n    \"telegram\": \"@johndoe\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user in the system"
          },
          "response": [
            {
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"securePassword123\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"contact_info\": {\n    \"phone\": \"+1234567890\"\n  }\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register"
                }
              },
              "status": "Created",
              "code": 201,
              "body": "{\n  \"user_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"User registered successfully\"\n}"
            }
          ]
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.access_token);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"securePassword123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Authenticate user and receive JWT token"
          },
          "response": [
            {
              "name": "Success",
              "status": "OK",
              "code": 200,
              "body": "{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600\n}"
            }
          ]
        },
        {
          "name": "Logout User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "logout"]
            },
            "description": "Logout user and invalidate token"
          }
        }
      ]
    },
    {
      "name": "User Service",
      "description": "User profile management endpoints",
      "item": [
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "profile"]
            },
            "description": "Get current user's profile information"
          },
          "response": [
            {
              "name": "Success",
              "status": "OK",
              "code": 200,
              "body": "{\n  \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"contact_info\": {\n    \"phone\": \"+1234567890\"\n  },\n  \"created_at\": \"2024-01-01T00:00:00Z\"\n}"
            }
          ]
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"Jane\",\n  \"last_name\": \"Smith\",\n  \"contact_info\": {\n    \"phone\": \"+0987654321\",\n    \"telegram\": \"@janesmith\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/users/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "profile"]
            },
            "description": "Update user profile information"
          }
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}"]
            },
            "description": "Get user profile by ID"
          }
        },
        {
          "name": "Delete Account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "profile"]
            },
            "description": "Delete user account and all associated data"
          }
        }
      ]
    },
    {
      "name": "Post Service",
      "description": "Post management endpoints",
      "item": [
        {
          "name": "Create Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('post_id', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"My first post on this social network! 🎉\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/posts",
              "host": ["{{base_url}}"],
              "path": ["api", "posts"]
            },
            "description": "Create a new post"
          }
        },
        {
          "name": "Get User Posts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/posts/{{user_id}}?limit=10&offset=0",
              "host": ["{{base_url}}"],
              "path": ["api", "posts", "{{user_id}}"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            },
            "description": "Get posts by user ID with pagination"
          }
        },
        {
          "name": "Get Post by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/posts/post/{{post_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "posts", "post", "{{post_id}}"]
            },
            "description": "Get specific post by ID"
          }
        },
        {
          "name": "Update Post",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Updated post content with new information! ✨\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/posts/{{post_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "posts", "{{post_id}}"]
            },
            "description": "Update existing post"
          }
        },
        {
          "name": "Delete Post",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/posts/{{post_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "posts", "{{post_id}}"]
            },
            "description": "Delete post by ID"
          }
        }
      ]
    },
    {
      "name": "Comment Service",
      "description": "Comment management endpoints",
      "item": [
        {
          "name": "Create Comment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"post_id\": \"{{post_id}}\",\n  \"content\": \"Great post! Thanks for sharing. 👍\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "comments"]
            },
            "description": "Add comment to a post"
          }
        },
        {
          "name": "Get Post Comments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/comments/{{post_id}}?limit=20&offset=0",
              "host": ["{{base_url}}"],
              "path": ["api", "comments", "{{post_id}}"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            },
            "description": "Get all comments for a specific post"
          }
        },
        {
          "name": "Update Comment",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Updated comment with more details! 📝\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/comments/{{comment_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "comments", "{{comment_id}}"]
            },
            "description": "Update existing comment"
          }
        },
        {
          "name": "Delete Comment",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/comments/{{comment_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "comments", "{{comment_id}}"]
            },
            "description": "Delete comment by ID"
          }
        }
      ]
    },
    {
      "name": "Messaging Service",
      "description": "Private messaging endpoints",
      "item": [
        {
          "name": "Send Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"receiver_id\": \"{{receiver_id}}\",\n  \"content\": \"Hello! How are you doing? 😊\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/messages",
              "host": ["{{base_url}}"],
              "path": ["api", "messages"]
            },
            "description": "Send private message to another user"
          }
        },
        {
          "name": "Get Conversation",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/messages/{{user_id}}?limit=50&offset=0",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", "{{user_id}}"],
              "query": [
                {
                  "key": "limit",
                  "value": "50"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            },
            "description": "Get conversation history with specific user"
          }
        },
        {
          "name": "Get All Conversations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/messages/conversations",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", "conversations"]
            },
            "description": "Get list of all conversations for current user"
          }
        },
        {
          "name": "Mark Messages as Read",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sender_id\": \"{{user_id}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/messages/read",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", "read"]
            },
            "description": "Mark all messages from specific sender as read"
          }
        }
      ]
    },
    {
      "name": "Notification Service",
      "description": "Notification management endpoints",
      "item": [
        {
          "name": "Get Notifications",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/notifications?limit=20&offset=0&read=false",
              "host": ["{{base_url}}"],
              "path": ["api", "notifications"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0"
                },
                {
                  "key": "read",
                  "value": "false",
                  "description": "Filter by read status"
                }
              ]
            },
            "description": "Get user notifications with filtering"
          }
        },
        {
          "name": "Mark Notification as Read",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/notifications/{{notification_id}}/read",
              "host": ["{{base_url}}"],
              "path": ["api", "notifications", "{{notification_id}}", "read"]
            },
            "description": "Mark specific notification as read"
          }
        },
        {
          "name": "Mark All as Read",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/notifications/read-all",
              "host": ["{{base_url}}"],
              "path": ["api", "notifications", "read-all"]
            },
            "description": "Mark all notifications as read"
          }
        },
        {
          "name": "Delete Notification",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/notifications/{{notification_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "notifications", "{{notification_id}}"]
            },
            "description": "Delete specific notification"
          }
        }
      ]
    },
    {
      "name": "Friendship Service",
      "description": "Управление социальными связями: заявки в друзья, принятие, отклонение, блокировки, получение списка друзей и подписчиков. Soft delete, интеграция с Notification Service.",
      "item": [
        {
          "name": "Send Friend Request",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" }, { "key": "Content-Type", "value": "application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"friend_id\": \"{{friend_id}}\"\n}", "options": { "raw": { "language": "json" } } },
            "url": { "raw": "{{base_url}}/api/v1/friends/request", "host": ["{{base_url}}"], "path": ["api", "v1", "friends", "request"] },
            "description": "Отправить заявку в друзья пользователю."
          }
        },
        {
          "name": "Accept Friend Request",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/friends/{{friend_id}}/accept", "host": ["{{base_url}}"], "path": ["api", "v1", "friends", "{{friend_id}}", "accept"] },
            "description": "Принять заявку в друзья."
          }
        },
        {
          "name": "Reject Friend Request",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/friends/{{friend_id}}/reject", "host": ["{{base_url}}"], "path": ["api", "v1", "friends", "{{friend_id}}", "reject"] },
            "description": "Отклонить заявку в друзья."
          }
        },
        {
          "name": "Block User",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/friends/{{friend_id}}/block", "host": ["{{base_url}}"], "path": ["api", "v1", "friends", "{{friend_id}}", "block"] },
            "description": "Заблокировать пользователя."
          }
        },
        {
          "name": "Get Friends List",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/friends", "host": ["{{base_url}}"], "path": ["api", "v1", "friends"] },
            "description": "Получить список друзей пользователя."
          }
        },
        {
          "name": "Get Friend Requests",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/friends/requests", "host": ["{{base_url}}"], "path": ["api", "v1", "friends", "requests"] },
            "description": "Получить список входящих и исходящих заявок в друзья."
          }
        }
      ]
    },
    {
      "name": "Media Service",
      "description": "Загрузка, получение, удаление медиафайлов (фото, видео, аудио). Интеграция с S3/CDN, асинхронная обработка, метаданные, soft delete.",
      "item": [
        {
          "name": "Upload Media",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "body": { "mode": "formdata", "formdata": [ { "key": "file", "type": "file", "src": "" } ] },
            "url": { "raw": "{{base_url}}/api/v1/media/upload", "host": ["{{base_url}}"], "path": ["api", "v1", "media", "upload"] },
            "description": "Загрузить медиафайл (multipart/form-data)."
          }
        },
        {
          "name": "Get Media by ID",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/media/{{media_id}}", "host": ["{{base_url}}"], "path": ["api", "v1", "media", "{{media_id}}"] },
            "description": "Получить метаданные и ссылку на медиафайл."
          }
        },
        {
          "name": "Delete Media",
          "request": {
            "method": "DELETE",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/media/{{media_id}}", "host": ["{{base_url}}"], "path": ["api", "v1", "media", "{{media_id}}"] },
            "description": "Удалить медиафайл (soft delete)."
          }
        }
      ]
    },
    {
      "name": "Search Service",
      "description": "Полнотекстовый поиск по пользователям, постам, комментариям, сообщениям. Фильтрация, релевантность, фасетный поиск.",
      "item": [
        {
          "name": "Search Users",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/search/users?q={{search_query}}", "host": ["{{base_url}}"], "path": ["api", "v1", "search", "users"], "query": [ { "key": "q", "value": "{{search_query}}" } ] },
            "description": "Поиск пользователей по имени, email и др."
          }
        },
        {
          "name": "Search Posts",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/search/posts?q={{search_query}}", "host": ["{{base_url}}"], "path": ["api", "v1", "search", "posts"], "query": [ { "key": "q", "value": "{{search_query}}" } ] },
            "description": "Поиск постов по тексту, тегам и др."
          }
        },
        {
          "name": "Search Comments",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/search/comments?q={{search_query}}", "host": ["{{base_url}}"], "path": ["api", "v1", "search", "comments"], "query": [ { "key": "q", "value": "{{search_query}}" } ] },
            "description": "Поиск комментариев по тексту."
          }
        }
      ]
    },
    {
      "name": "Admin Service",
      "description": "Модерация, жалобы, блокировки, аналитика, отчёты. Только для администраторов.",
      "item": [
        {
          "name": "Get Reports",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/admin/reports", "host": ["{{base_url}}"], "path": ["api", "v1", "admin", "reports"] },
            "description": "Получить список жалоб и нарушений."
          }
        },
        {
          "name": "Block User (Admin)",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" }, { "key": "Content-Type", "value": "application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"user_id\": \"{{user_id}}\",\n  \"reason\": \"spam\"\n}", "options": { "raw": { "language": "json" } } },
            "url": { "raw": "{{base_url}}/api/v1/admin/block-user", "host": ["{{base_url}}"], "path": ["api", "v1", "admin", "block-user"] },
            "description": "Заблокировать пользователя (только для админов)."
          }
        },
        {
          "name": "Unblock User (Admin)",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" }, { "key": "Content-Type", "value": "application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"user_id\": \"{{user_id}}\"\n}", "options": { "raw": { "language": "json" } } },
            "url": { "raw": "{{base_url}}/api/v1/admin/unblock-user", "host": ["{{base_url}}"], "path": ["api", "v1", "admin", "unblock-user"] },
            "description": "Разблокировать пользователя (только для админов)."
          }
        }
      ]
    },
    {
      "name": "NewsFeed Service",
      "description": "Генерация и получение персональной ленты новостей. Агрегация, ранжирование, кэширование, интеграция с Post и Friendship Service.",
      "item": [
        {
          "name": "Get News Feed",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/feed", "host": ["{{base_url}}"], "path": ["api", "v1", "feed"] },
            "description": "Получить персональную ленту новостей пользователя."
          }
        },
        {
          "name": "Refresh News Feed",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{jwt_token}}" } ],
            "url": { "raw": "{{base_url}}/api/v1/feed/refresh", "host": ["{{base_url}}"], "path": ["api", "v1", "feed", "refresh"] },
            "description": "Принудительно обновить ленту новостей (перегенерация)."
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Request to: ' + pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has Content-Type header', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}